// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    DMux(in=true, sel=instruction[15], a=ainstr, b=cinstr);

    Mux(b=cinstr, sel=instruction[12], out=a);
    And(a=cinstr, b=instruction[5], out=destA);
    And(a=cinstr, b=instruction[4], out=destD);
    And(a=cinstr, b=instruction[3], out=writeM);
    DMux8Way(in=cinstr, sel=instruction[0..2], b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp);

    Or(a=destA, b=ainstr, out=loadA);

    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    And(a=notzr, b=notng, out=ps);
    Or(a=ps, b=zr, out=pszr);
    Or(a=ng, b=zr, out=ngzr);

    And(a=jgt, b=ps, out=jump1);
    And(a=jeq, b=zr, out=jump2);
    And(a=jge, b=pszr, out=jump3);
    And(a=jlt, b=ng, out=jump4);
    And(a=jne, b=notzr, out=jump5);
    And(a=jle, b=ngzr, out=jump6);
    Or8Way(in[1]=jump1, in[2]=jump2, in[3]=jump3, in[4]=jump4, in[5]=jump5, in[6]=jump6, in[7]=jmp, out=jump);

    Not(in=jump, out=notjump);

    ARegister(in=mux1, load=loadA, out=aReg, out[0..14]=addressM);
    DRegister(in=aluout, load=destD, out=dReg);

    Mux16(a=aluout, b=instruction, sel=ainstr, out=mux1);
    Mux16(a=aReg, b=inM, sel=a, out=mux2out);

    ALU(x=dReg, y=mux2out, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=zr, ng=ng);

    PC(in=aReg, load=jump, inc=notjump, reset=reset, out[0..14]=pc);
}